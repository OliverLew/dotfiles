" vim basic {{{
" be iMproved, put this line at TOP of vimrc
set nocompatible
let $VIM = $XDG_CONFIG_HOME . '/vim'
set runtimepath+=/usr/share/vim/vimfiles
set backupdir=$XDG_CACHE_HOME/vim/backup
if !has('nvim')
    set viminfo+=n$XDG_CACHE_HOME/vim/viminfo
endif
" }}}
" Vim-Plug {{{
call plug#begin($VIM . '/bundle')
Plug 'godlygeek/tabular'
Plug 'itchyny/lightline.vim'
Plug 'mengelbrecht/lightline-bufferline'
Plug 'maximbaz/lightline-ale'
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-abolish'
Plug 'tpope/vim-endwise'
Plug 'liuchengxu/vim-which-key'
Plug 'w0rp/ale'
Plug 'majutsushi/tagbar'
Plug 'lervag/vimtex'
Plug 'VoldikSS/vim-mma'
Plug 'jpalardy/vim-slime'
Plug 'dylanaraps/wal.vim'
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
Plug 'baskerville/vim-sxhkdrc'
Plug 'lifepillar/vim-mucomplete'
" Plug 'MikeCoder/markdown-preview.vim'
" Plug 'JamshedVesuna/vim-markdown-preview'
" Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() } }
" Plug 'prabirshrestha/async.vim'
" Plug 'prabirshrestha/asyncomplete.vim'
" Plug 'prabirshrestha/asyncomplete-lsp.vim'
" Plug 'prabirshrestha/vim-lsp'
call plug#end()
" }}}
" Vim Settings
" Vim Config {{{
" leader key
let mapleader = ','
let maplocalleader = '\'
" syntax
syntax on
" filetype
filetype on
filetype plugin on
filetype indent on
set backup
set autoread " auto reload files
set encoding=utf-8
set fileencodings=utf-8,gb2312,gb18030,gbk,ucs-bom,cp936,latin1
set spelllang=en,cjk
set clipboard=unnamedplus " use x11 normal clipboard
set autowrite " automatically write a file when leaving a buffer
set hidden
set laststatus=2
set timeoutlen=300 " time out for key code delays
set ttimeoutlen=0 " do not wait after escape key
set diffopt+=vertical " open diff window vertically
set completeopt=menuone,noinsert,preview " comletion
" }}}
" UI basic {{{
" clear sign column highlight
highlight clear SignColumn
set guioptions=di " gui options: dark, icon
set number " show line number
set relativenumber " show relative number
set signcolumn=yes " always show sign column
set showcmd " shows what you are typing as a command
set wildmenu " turn on wild menu on :e <Tab>
set title " change the terminal's title
set showmatch " show matching characters
set scrolloff=2 " minimum lines above and below cursor
set splitright " split into right by default
set updatetime=100 " update time, related to fugitive sign column update, etc.
set lazyredraw " redraw when needed
set noerrorbells " don't beep
set shortmess+=I " don't show welcome screen
set showtabline=2 " show tabs / buffers on top
set noshowmode " do not show mode on the last line
set display+=lastline " show partial line
set background=dark " color scheme
set mouse=a " enable mouse support in console
" fix for urxvt and st
if !has('nvim')
    if $TERM =~ "rxvt-unicode"
        set ttymouse=urxvt
    elseif $TERM == "st" || $TERM == "st-256color"
        set ttymouse=sgr
    endif
endif
if $TERM != "linux"
    " cursor shape for vte compatible terminals (usrvt, st, xterm, termite)
    let &t_SI = "\e[6 q"
    let &t_SR = "\e[4 q"
    let &t_EI = "\e[2 q"
else
    " cursor shape for linux console
    let &t_ve = "\e[?25h"
    let &t_vi = "\e[?25l"
    let &t_SI = "\e[?0c"
    let &t_SR = "\e[?4c"
    let &t_EI = "\e[?8c"
endif
colorscheme wal
if has('gui_running')
    set background=light
endif
" incremental case-insensitive highlight smart case search
set incsearch ignorecase smartcase hlsearch
" }}}
" Space Tabs Indentations {{{
" indentations
set autoindent
set smartindent
set cindent
" tabs
set tabstop=4
set shiftwidth=0  " make it the same as tabstop
set softtabstop=-1  " make it the same as shiftwidth
set expandtab
set smarttab
" show tabs and trailing white space
set list
set listchars=tab:>-,trail:.
" }}}
" Navigations {{{
" go up/down
nnoremap <silent> j gj
nnoremap <silent> k gk
vnoremap <silent> j gj
vnoremap <silent> k gk
" buffers
nnoremap <silent> <C-H> :bprevious<CR>
nnoremap <silent> <C-L> :bnext<CR>
" toggle fold
nnoremap <space> za
" center the screen when searching
nnoremap n nzzzv
nnoremap N Nzzzv
" }}}
" Autocmd {{{
autocmd VimEnter * silent exec "! echo -ne ".&t_EI
autocmd VimLeave * silent exec "! echo -ne ".&t_SI
autocmd BufNewFile,BufRead *.plt setfiletype gnuplot
autocmd BufNewFile,BufRead muttrc,*muttrc setfiletype neomuttrc
autocmd BufWritePost *Xresources silent call system("DISPLAY=:0 xrdb -load ".expand('%'))
autocmd FileType tex,markdown,mma setlocal sw=2 ts=2 sts=2 cole=2
autocmd FileType tex,markdown,gitcommit setlocal spell
autocmd FileType gnuplot setlocal commentstring=#%s
autocmd FileType mma setlocal noet commentstring=(*%s*)
" autocmd FileType tex let b:ale_lsp_root='./'
" }}}
" Fcitx Toggle {{{
" restore input method state when enter insert mode
let s:fcitx_cmd = executable("fcitx5-remote") ? "fcitx5-remote" : "fcitx-remote"
autocmd InsertLeave * let b:fcitx = system(s:fcitx_cmd) | call system(s:fcitx_cmd.' -c')
autocmd InsertEnter * if exists('b:fcitx') && b:fcitx == 2 | call system(s:fcitx_cmd.' -o') | endif
" }}}
" Netrw -> NerdTree {{{
" Make Netrw function like NerdTree
let g:netrw_home         = $VIM
let g:netrw_banner       = 0   " disable banner
let g:netrw_browse_split = 4   " open file in previous (CTRL-W_p) window
let g:netrw_winsize      = -20 " split size
let g:netrw_dirhistmax   = 0   " disable history
let g:netrw_liststyle    = 0   " thin listing
nnoremap <C-N> :Lexplore<CR>
" }}}
" My own goyo mode {{{
function Goyo()
    if exists("g:goyo_status")
        unlet g:goyo_status
        set nu rnu ru scl=auto stal=2 ls=2
    else
        let g:goyo_status = 1
        set nonu nornu noru scl=no stal=0 ls=0
    endif
endfunction
" }}}
" Execute current file {{{
function ExecCurrentFile()
    if &ft == "sh"
        execute ":!sh %:p"
    elseif &ft == "python"
        execute ":!python %:p"
    endif
endfunction
" }}}
" Plugin Settings
" Vim Which Key {{{
call which_key#register(mapleader, "g:which_key_map")
call which_key#register(maplocalleader, "g:which_key_map_local")
let g:which_key_use_floating_win = 0
let g:which_key_fallback_to_native_key = 1
let g:which_key_map = {
  \ 'q' : [ ':q',  'quit'],
  \ 'Q' : [ ':qa', 'quit all'],
  \ 'd' : [ ':bd', 'close buffer'],
  \ 'w' : [ ':w',  'save'],
  \ 'e' : [ ':e',  'edit (reload)'],
  \ 'x' : [ ':x',  'save and quit'],
  \ 'k' : [ ':call ExecCurrentFile()',  'run current file'],
  \ '.' : [ ':let @/=""', 'clear search hl'],
  \ 'r' : [ ':so $MYVIMRC', 'reload vimrc'],
  \ 'z' : [ ':call Goyo()', 'Goyo mode'],
  \ }
let g:which_key_map_local = {
  \ 'l' : { 'name' : '+vimtex' }
  \ }
nnoremap <silent> <leader> :WhichKey '<leader>'<CR>
vnoremap <silent> <leader> :WhichKeyVisual '<leader>'<CR>
nnoremap <silent> <localleader> :WhichKey '<localleader>'<CR>
vnoremap <silent> <localleader> :WhichKeyVisual '<localleader>'<CR>
" vim unimpaired
nnoremap <silent> [ :WhichKey '['<CR>
nnoremap <silent> ] :WhichKey ']'<CR>
nnoremap <silent> y :WhichKey 'y'<CR>
" }}}
" Vim commentary {{{
nmap <leader>c <Plug>CommentaryLine
omap <leader>c <Plug>Commentary
xmap <leader>c <Plug>Commentary
let g:which_key_map.c = 'comment'
" }}}
" Vim Endwise {{{
" https://github.com/tpope/vim-endwise/issues/41#issuecomment-432905813
autocmd FileType tex
  \ let b:endwise_addition = '\="\\end" . matchstr(submatch(0), "{.\\{-}}")' |
  \ let b:endwise_words = 'begin' |
  \ let b:endwise_pattern = '\\begin{.\{-}}' |
  \ let b:endwise_syngroups = 'texSection,texBeginEnd,texBeginEndName,texStatement'
" }}}
" Markdown {{{
" vim markdown
" fold
let g:markdown_folding = 1
let g:markdown_fenced_languages = ['html', 'python', 'bash=sh', 'sh', 'c']

let g:vim_markdown_folding_style_pythonic = 1
let g:vim_markdown_frontmatter = 1
let g:vim_markdown_new_list_item_indent = 2
" vim-markdown-preview
let vim_markdown_preview_browser='firefox'
" let vim_markdown_preview_use_xdg_open=1
let vim_markdown_preview_temp_file=1
let vim_markdown_preview_github=0
" preview
let g:mkdp_auto_start = 0
let g:mkdp_browser = 'firefox'
" }}}
" Lightline {{{
let s:Xcolors = { '1': 'NONE', '2': 'NONE', '3': 'NONE', '4': 'NONE',
   \ '5': 'NONE', '6': 'NONE', '7': 'NONE', '8': 'NONE', '0': 'NONE' }
" Load colors from Xresources
if has('gui_running')
    let s:regex = '.*\*color\(\d*\):.*\(#[0-9a-fA-F]\{6\}\).*'
    for line in systemlist("xrdb -query")
        let s:color = matchlist(line, s:regex)
        if s:color != []
            let s:Xcolors[s:color[1]] = s:color[2]
        endif
    endfor
endif

let s:bg      = [ 'NONE', 'NONE' ]
let s:black   = [ s:Xcolors['0'], 0 ]
let s:red     = [ s:Xcolors['1'], 1 ]
let s:green   = [ s:Xcolors['2'], 2 ]
let s:yellow  = [ s:Xcolors['3'], 3 ]
let s:blue    = [ s:Xcolors['4'], 4 ]
let s:magenta = [ s:Xcolors['5'], 5 ]
let s:cyan    = [ s:Xcolors['6'], 6 ]
let s:white   = [ s:Xcolors['7'], 7 ]
let s:grey    = [ s:Xcolors['8'], 8 ]

let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {}}
let s:p.normal.left     = [ [ s:black, s:cyan    ], [ s:white, s:grey ] ]
let s:p.normal.right    = [ [ s:black, s:white   ], [ s:white, s:grey ] ]
let s:p.inactive.right  = [ [ s:black, s:grey    ], [ s:white, s:bg   ] ]
let s:p.inactive.left   = [ [ s:white, s:bg      ], [ s:grey,  s:bg   ] ]
let s:p.insert.left     = [ [ s:black, s:green   ], [ s:white, s:grey ] ]
let s:p.replace.left    = [ [ s:black, s:magenta ], [ s:white, s:grey ] ]
let s:p.visual.left     = [ [ s:black, s:yellow  ], [ s:white, s:grey ] ]
let s:p.normal.middle   = [ [ s:white, s:bg      ] ]
let s:p.normal.error    = [ [ s:black, s:red     ] ]
let s:p.normal.warning  = [ [ s:black, s:yellow  ] ]
let s:p.inactive.middle = [ [ s:grey,  s:bg      ] ]
let s:p.tabline.left    = [ [ s:white, s:bg      ] ]
let s:p.tabline.tabsel  = [ [ s:black, s:white   ] ]
let s:p.tabline.middle  = [ [ s:grey,  s:bg      ] ]
let s:p.tabline.right   = copy(s:p.normal.right)

let g:lightline#colorscheme#base16#palette = lightline#colorscheme#flatten(s:p)
let g:lightline = {
    \ 'colorscheme': 'base16',
    \ 'active': {
    \   'left': [ [ 'mode', 'paste' ],
    \             [ 'gitbranch', 'readonly' ],
    \             [ 'filename', 'modified' ] ],
    \   'right': [ [ 'linter_checking',
    \               'linter_errors',
    \               'linter_warnings',
    \               'linter_infos',
    \               'linter_ok' ],
    \              [ 'percent', 'lineinfo', 'syntastic' ],
    \              [ 'fileformat', 'fileencoding', 'filetype' ] ],
    \ },
    \ 'tabline': {
    \   'left': [['buffers']],
    \   'right' : [[]]
    \ },
    \ 'component': {
    \   'filename': '%<%{expand("%:t")}'
    \ },
    \ 'component_expand': {
    \   'buffers': 'lightline#bufferline#buffers',
    \   'linter_checking': 'lightline#ale#checking',
    \   'linter_infos': 'lightline#ale#infos',
    \   'linter_warnings': 'lightline#ale#warnings',
    \   'linter_errors': 'lightline#ale#errors',
    \   'linter_ok': 'lightline#ale#ok',
    \ },
    \ 'component_type': {
    \   'buffers': 'tabsel',
    \   'linter_checking': 'right',
    \   'linter_infos': 'right',
    \   'linter_warnings': 'warning',
    \   'linter_errors': 'error',
    \   'linter_ok': 'right',
    \ },
    \ 'component_function': {
    \   'gitbranch': 'fugitive#head',
    \ },
    \ }
" }}}
" Fugitive {{{
" show the log in a pretty way
function! GitRepoLogAll()
    silent Git log --all --decorate --oneline --graph --date-order
    redraw!
endfunction
" key bindings
let g:which_key_map.g = {
  \ 'name' : '+git-operation',
  \ 'b' : [ ':Gblame', 'git blame' ],
  \ 'd' : [ ':Gvdiff', 'git diff' ],
  \ 'c' : [ ':Gcommit -v', 'git commit' ],
  \ 'g' : [ ':!tig -C"$(dirname $(realpath %))"', 'run tig' ],
  \ 's' : [ ':Gstatus', 'git status' ],
  \ 'l' : [ ':call GitRepoLogAll()', 'git show log' ],
  \ 'u' : [ ':Gpush', 'git push' ],
  \ 'f' : [ ':Gpull', 'git pull' ],
  \ 't' : {
    \ 'name' : '+stash',
    \ 's' : [ ':Git stash', 'git stash' ],
    \ 'p' : [ ':Git stash pop', 'git stash pop' ],
    \ 'l' : [ ':Git stash list', 'git stash list' ]
    \ }
  \ }
" }}}
" Gitgutter {{{
" the previous ~_ take two columns
let g:gitgutter_sign_modified_removed   = '^'
" update signs after focus
let g:gitgutter_terminal_reports_focus  = 0
let g:gitgutter_max_signs = 1000
" }}}
" ALE {{{
" automatically pop up completion candidates
let g:ale_completion_enabled = 1
let g:ale_completion_delay   = 0
" set sign column characters
let g:ale_sign_column_always   = 1
let g:ale_sign_error           = '>'
let g:ale_sign_warning         = '-'
" show pop up in balloons
let g:ale_set_balloons         = 1
let g:ale_set_quickfix         = 1
" only lint when leaving insert mode
let g:ale_lint_on_insert_leave = 1
let g:ale_lint_on_text_changed = 'normal'

" clangd needs a compile_commands.json file for the project
let g:ale_linters = {
  \ 'c': ['ccls'],
  \ 'cpp': ['ccls'],
  \ 'python': ['pyls'],
  \ 'lua': ['luacheck'],
  \ 'sh': ['shellcheck']
  \ }
let g:ale_fixers = {
  \ '*': ['remove_trailing_lines', 'trim_whitespace'],
  \ 'c': ['clang-format', 'clangtidy'],
  \ 'cpp': ['clang-format', 'clangtidy'],
  \ 'sh': ['shellcheck']
  \ }
let g:ale_linters_explicit = 1
let g:ale_c_parse_makefile = 1

" Key mapping
let g:which_key_map.a = {
  \ 'name' : '+ale',
  \ 'r' : [ '<Plug>(ale_find_references)', 'find references' ],
  \ 'd' : [ '<Plug>(ale_go_to_definition)', 'go to definition' ],
  \ 'n' : [ '<Plug>(ale_next_wrap)' , 'go to next ale mark' ],
  \ 'p' : [ '<Plug>(ale_previous_wrap)' , 'go to previous ale mark' ],
  \ 'j' : [ '<Plug>(ale_next_wrap)' , 'go to next ale mark' ],
  \ 'k' : [ '<Plug>(ale_previous_wrap)' , 'go to previous ale mark' ],
  \ 'h' : [ '<Plug>(ale_hover)' , 'show hover info' ],
  \ }
" }}}
" Vim Tex {{{
let g:tex_flavor = 'latex'
" enable vimtex fold
let g:vimtex_fold_enabled = 1
let g:vimtex_syntax_enabled = 0
" start vim with a server, see ':h vimtex-clientserver'
if empty(v:servername) && exists('*remote_startserver') && !empty($DISPLAY) && empty($TMUX)
    call remote_startserver('VIM')
endif
" viewer setting
let g:vimtex_view_method = 'zathura'
" matching delimiters is causing performance issues
let g:vimtex_matchparen_enabled = 0
" compiler
let g:vimtex_compiler_method = "latexmk"
let g:vimtex_compiler_latexmk = {
    \ 'build_dir' : 'output',
    \}
" }}}
" Mathematica {{{
let g:mma_candy = 2
" }}}
" vim-slime {{{
let g:slime_no_mappings = 1
xmap <leader>ss <Plug>SlimeRegionSend
nmap <leader>ss <Plug>SlimeParagraphSend
let g:which_key_map.s = {
    \ "name" : "slime",
    \ "s" : "send text with slime",
    \ "c" : [ "<Plug>SlimeConfig", "configure slime" ],
    \ }
" set config to use the pane on the right by default
let g:slime_default_config = {
    \ "socket_name": get(split($TMUX, ","), 0),
    \ "target_pane": "{right-of}"
    \ }
" vim terminal config
let g:slime_vimterminal_config = {
    \ "vertical": 1
    \ }
let g:slime_dont_ask_default = 0
" use temp file
let g:slime_paste_file = tempname()
" ipython specific setting
let g:slime_python_ipython = 0
" targets
if len($TMUX) != 0
    let g:slime_target = "tmux"
    let g:slime_dont_ask_default = 1
elseif match($TERM, "screen") != -1
    let g:slime_target = "screen"
else
    let g:slime_target = "vimterminal"
endif
" }}}
" vim-lsp {{{
" let g:which_key_map.l = { "name": "language server" }
" if executable('pyls')
"     " pip install python-language-server
"     au User lsp_setup call lsp#register_server({
"                 \ 'name': 'pyls',
"                 \ 'cmd': {server_info->['pyls']},
"                 \ 'whitelist': ['python'],
"                 \ })
" endif
" if executable('texlab')
"     au User lsp_setup call lsp#register_server({
"                 \ 'name': 'texlab',
"                 \ 'cmd': {server_info->['texlab']},
"                 \ 'whitelist': ['bib','tex'],
"                 \ })
" endif
" function! s:on_lsp_buffer_enabled() abort
"     setlocal omnifunc=lsp#complete
"     setlocal signcolumn=yes
" endfunction
" augroup lsp_install
"     au!
"     " call s:on_lsp_buffer_enabled only for languages that has the server registered.
"     autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
" augroup END
" }}}
" asyncomplete {{{
" inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
" inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
" inoremap <expr> <cr>    pumvisible() ? asyncomplete#close_popup() : "\<cr>"
" imap <c-space> <Plug>(asyncomplete_force_refresh)
" let g:asyncomplete_auto_popup = 1
" let g:asyncomplete_auto_completeopt = 0
" }}}
" ultisnippet {{{
let g:UltiSnipsJumpForwardTrigger="<Tab>"
let g:UltiSnipsJumpBackwardTrigger="<S-Tab>"
" }}}
" tagbar {{{
let g:tagbar_width = max([25, winwidth(0) / 5])
let g:tagbar_compact = 1
" }}}
let g:mucomplete#enable_auto_at_startup = 1
let g:mucomplete#completion_delay = 1000
let g:mucomplete#chain = ['path', 'omni', 'spel']
" vim:foldmethod=marker:foldlevel=0
