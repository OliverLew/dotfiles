" Plugin Manager {{{
" Vim-Plug {{{
" vim basic settings
set runtimepath=$XDG_CONFIG_HOME/vim,$VIMRUNTIME,$XDG_CONFIG_HOME/vim/after
set viminfo="$HOME/.cache/vim/viminfo"
" automatic installation
if empty(glob("$XDG_CONFIG_HOME/vim/autoload/plug.vim"))
  silent !curl -fLo $XDG_CONFIG_HOME/vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif
" begin vim-plug
call plug#begin('$XDG_CONFIG_HOME/vim/bundle')
Plug 'VundleVim/Vundle.vim'
Plug 'godlygeek/tabular'
Plug 'plasticboy/vim-markdown'
Plug 'itchyny/lightline.vim'
Plug 'mengelbrecht/lightline-bufferline'
Plug 'maximbaz/lightline-ale'
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-repeat'
Plug 'liuchengxu/vim-which-key'
Plug 'w0rp/ale'
Plug 'majutsushi/tagbar'
Plug 'lervag/vimtex'
Plug 'VoldikSS/vim-mma'
Plug 'jpalardy/vim-slime'
Plug 'neomutt/neomutt.vim'
Plug 'dylanaraps/wal.vim'
Plug 'jdkanani/vim-material-theme'
Plug 'ryanoasis/vim-devicons'
Plug 'junegunn/fzf.vim'
Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() } }
call plug#end()
" }}}
" }}}
" Vim Settings {{{
" Vim Config {{{
" be iMproved
set nocompatible
" leader key
let mapleader = ','
let maplocalleader = '\'
" syntax
syntax on
" filetype
filetype on
filetype plugin on
filetype indent on
" auto reload files
set autoread
" set vim folder
let $VIM = "/home/oliver/.config/vim"
" set encoding
set encoding=utf-8
set fileencodings=utf-8,gb2312,gb18030,gbk,ucs-bom,cp936,latin1
set spelllang=en,cjk
" use x11 normal clipboard
set clipboard=unnamedplus
" automatically write a file when leaving a buffer
set autowrite
set hidden
set laststatus=2
" fold
set foldlevel=1
" conceal
" set conceallevel=2
" time out for key code delays, decide how long to wait for key code
" sequence and how long leader guide (if installed) will pop up.
set timeoutlen=300
" do not wait after escape key
set ttimeoutlen=0
" open diff window vertically
set diffopt+=vertical
" comletion
set completeopt=menuone,noinsert,longest
" }}}
" UI basic {{{
" clear sign column highlight
highlight clear SignColumn
" gui options: dark, tab, icon, scrollbar
set guioptions=deir
set guifont=Hack\ 12
" show line number
set number
" always show sign column
set signcolumn=yes
" enable mouse support in console
set mouse=a
" fix for urxvt and st
if !has('nvim')
    if $TERM =~ "rxvt-unicode"
        set ttymouse=urxvt
    elseif $TERM == "st" || $TERM == "st-256color"
        set ttymouse=sgr
    endif
endif
" cursor shape for vte compatible terminals (usrvt, st, xterm, termite)
let &t_SI = "\e[6 q"
let &t_SR = "\e[4 q"
let &t_EI = "\e[2 q"
" shows what you are typing as a command
set showcmd
" turn on wild menu on :e <Tab>
set wildmenu
" change the terminal's title
set title
" show matching characters
set showmatch
" minimum lines above and below cursor
set scrolloff=2
" split into right by default
set splitright
" update time, related to fugitive sign column update, etc.
set updatetime=100
" redraw when needed
set lazyredraw
" don't beep
set noerrorbells
" don't show welcome screen
set shortmess+=I
set showtabline=2
set noshowmode
" show partial line
set display+=lastline
" color scheme
set background=dark
if has('gui_running')
    colorscheme material-theme
else
    colorscheme wal
endif
" }}}
" Space Tabs Indentations {{{
" indentations
set autoindent
set smartindent
set cindent
" tabs
set tabstop=4
set shiftwidth=0  " make it the same as tabstop
set softtabstop=-1  " make it the same as shiftwidth
set expandtab
set smarttab
" show tabs and trailing white space
set list
set listchars=tab:>-,trail:.
" }}}
" Search {{{
" incremental search
set incsearch
" case-insensitive search
set ignorecase
" smart case search(only when search pattern has no capital letters)
set smartcase
" highlight search
set hlsearch
" }}}
" Navigations {{{
" go up/down
nnoremap <silent> j gj
nnoremap <silent> k gk
vnoremap <silent> j gj
vnoremap <silent> k gk
" buffers
nnoremap <silent> <C-H> :bprevious<CR>
nnoremap <silent> <C-L> :bnext<CR>
" toggle fold
nnoremap <space> za
" }}}
" Autocmd {{{
autocmd BufNewFile,BufRead *.plt setfiletype gnuplot
autocmd BufNewFile,BufRead muttrc,*muttrc setfiletype neomuttrc
autocmd BufWritePost *Xresources :silent !xrdb -load %
autocmd FileType tex,markdown setlocal sw=2 ts=2 sts=2
autocmd FileType tex,markdown,gitcommit setlocal spell
" fcitx: restore input method state when enter insert mode
let s:fcitx_cmd = executable("fcitx5-remote") ? "fcitx5-remote" : "fcitx-remote"
autocmd InsertLeave * let b:fcitx = system(s:fcitx_cmd) | call system(s:fcitx_cmd.' -c')
autocmd InsertEnter * if exists('b:fcitx') && b:fcitx == 2 | call system(s:fcitx_cmd.' -o') | endif
" }}}
" Netrw {{{
" Make Netrw function like NerdTree
let g:netrw_banner            = 0 " disable banner
let g:netrw_browse_split      = 4 " open file in previous (CTRL-W_p) window
let g:netrw_winsize           = 30
" nnoremap <Tab> :Lexplore<CR>  " This generates empty buffers, bad
nnoremap <C-N> :call ToggleNetRW()<CR>
function ToggleNetRW()
    if exists("g:netrw_buffer")
        exe "bd".g:netrw_buffer | unlet g:netrw_buffer
    else
        Vexplore | let g:netrw_buffer=bufnr("%")
    endif
endfunction
" }}}
" }}}
" Plugin Settings {{{
" Vim Which Key {{{
let g:which_key_use_floating_win = 0
let g:which_key_map = {
  \ 'c' : [ 'gcc', 'comment'],
  \ 'q' : [ ':q',  'quit'],
  \ 'Q' : [ ':qa', 'quit all'],
  \ 'd' : [ ':bd', 'close buffer'],
  \ 'w' : [ ':w',  'save'],
  \ 'e' : [ ':e',  'edit (reload)'],
  \ 'x' : [ ':x',  'save and quit'],
  \ '.' : [ ':let @/=""', 'clear search hl'],
  \ 'r' : [ ':so $MYVIMRC', 'reload vimrc'],
  \ }
let g:which_key_map_local = {
  \ 'l' : { 'name' : '+vimtex' }
  \ }
nnoremap <silent> <leader> :WhichKey '<leader>'<CR>
vnoremap <silent> <leader> :WhichKeyVisual '<leader>'<CR>
nnoremap <silent> <localleader> :WhichKey '<localleader>'<CR>
vnoremap <silent> <localleader> :WhichKeyVisual '<localleader>'<CR>
call which_key#register(mapleader, "g:which_key_map")
call which_key#register(maplocalleader, "g:which_key_map_local")
" }}}
" Markdown {{{
let g:vim_markdown_folding_style_pythonic = 1
let g:vim_markdown_frontmatter = 1
let g:vim_markdown_new_list_item_indent = 2
" preview
let g:mkdp_auto_start = 0
let g:mkdp_browser = 'firefox'
" }}}
" Lightline {{{
" the base256 and base16 colorscheme are not from any vim plugins, find them
" in my repo
let s:Xcolors = { '0': 'NONE',
  \ '1': 'NONE', '2': 'NONE', '3': 'NONE', '4': 'NONE',
  \ '5': 'NONE', '6': 'NONE', '7': 'NONE', '8': 'NONE',
  \ }
" Load colors from Xresources
if has('gui_running')
    let s:regex = '.*\*color\(\d*\):.*\(#[0-9a-fA-F]\{6\}\).*'
    for line in systemlist("xrdb -query")
        let s:color = matchlist(line, s:regex)
        if s:color != []
            let s:Xcolors[s:color[1]] = s:color[2]
        endif
    endfor
endif

let s:bg      = [ 'NONE', 'NONE' ]
let s:black   = [ s:Xcolors['0'], 0 ]
let s:red     = [ s:Xcolors['1'], 1 ]
let s:green   = [ s:Xcolors['2'], 2 ]
let s:yellow  = [ s:Xcolors['3'], 3 ]
let s:blue    = [ s:Xcolors['4'], 4 ]
let s:magenta = [ s:Xcolors['5'], 5 ]
let s:cyan    = [ s:Xcolors['6'], 6 ]
let s:white   = [ s:Xcolors['7'], 7 ]
let s:grey    = [ s:Xcolors['8'], 8 ]

let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {}}
let s:p.normal.left     = [ [ s:black, s:cyan    ], [ s:white, s:grey ] ]
let s:p.normal.right    = [ [ s:black, s:white   ], [ s:white, s:grey ] ]
let s:p.inactive.right  = [ [ s:black, s:grey    ], [ s:white, s:bg   ] ]
let s:p.inactive.left   = [ [ s:white, s:bg      ], [ s:grey,  s:bg   ] ]
let s:p.insert.left     = [ [ s:black, s:green   ], [ s:white, s:grey ] ]
let s:p.replace.left    = [ [ s:black, s:magenta ], [ s:white, s:grey ] ]
let s:p.visual.left     = [ [ s:black, s:yellow  ], [ s:white, s:grey ] ]
let s:p.normal.middle   = [ [ s:white, s:bg      ] ]
let s:p.normal.error    = [ [ s:black, s:red     ] ]
let s:p.normal.warning  = [ [ s:black, s:yellow  ] ]
let s:p.inactive.middle = [ [ s:grey,  s:bg      ] ]
let s:p.tabline.left    = [ [ s:white, s:bg      ] ]
let s:p.tabline.tabsel  = [ [ s:black, s:white   ] ]
let s:p.tabline.middle  = [ [ s:grey,  s:bg      ] ]
let s:p.tabline.right   = copy(s:p.normal.right)

let g:lightline#colorscheme#base16#palette = lightline#colorscheme#flatten(s:p)
let g:lightline = {
    \ 'colorscheme': 'base16',
    \ 'active': {
    \   'left': [ [ 'mode', 'paste' ],
    \             [ 'gitbranch', 'readonly' ],
    \             [ 'filename', 'modified' ] ],
    \   'right': [ [ 'linter_checking',
    \               'linter_errors',
    \               'linter_warnings',
    \               'linter_ok' ],
    \              [ 'percent', 'lineinfo', 'syntastic' ],
    \              [ 'fileformat', 'fileencoding', 'filetype' ] ],
    \ },
    \ 'tabline': {
    \   'left': [['buffers']],
    \   'right' : [[]]
    \ },
    \ 'component': {
    \   'filename': '%<%{expand("%:t")}'
    \ },
    \ 'component_expand': {
    \   'buffers': 'lightline#bufferline#buffers',
    \   'linter_checking': 'lightline#ale#checking',
    \   'linter_warnings': 'lightline#ale#warnings',
    \   'linter_errors': 'lightline#ale#errors',
    \   'linter_ok': 'lightline#ale#ok',
    \ },
    \ 'component_type': {
    \   'buffers': 'tabsel',
    \   'linter_checking': 'left',
    \   'linter_warnings': 'warning',
    \   'linter_errors': 'error',
    \   'linter_ok': 'left',
    \ },
    \ 'component_function': {
    \   'gitbranch': 'fugitive#head'
    \ },
    \ }
" }}}
" Gitgutter {{{
" the previous ~_ take two columns
let g:gitgutter_sign_modified_removed   = '^'
" update signs after focus
let g:gitgutter_terminal_reports_focus  = 0
let g:gitgutter_max_signs = 1000
" }}}
" ALE {{{
" automatically pop up completion candidates
let g:ale_completion_enabled = 1
let g:ale_completion_delay   = 0
" set sign column characters
let g:ale_sign_column_always   = 1
let g:ale_sign_error           = '>'
let g:ale_sign_warning         = '-'
" show pop up in balloons
let g:ale_set_balloons         = 1
let g:ale_set_quickfix         = 1
" only lint when leaving insert mode
let g:ale_lint_on_insert_leave = 1
let g:ale_lint_on_text_changed = 'normal'

" clangd needs a compile_commands.json file for the project
let g:ale_linters = {
  \ 'c': ['ccls'],
  \ 'python': ['pyls'],
  \ 'sh': ['shellcheck'],
  \ 'lua': ['luacheck']
  \ }
let g:ale_fixers = {
  \ '*': ['remove_trailing_lines', 'trim_whitespace'],
  \ 'c': ['clang-format', 'clangtidy']
  \ }
let g:ale_linters_explicit = 1
let g:ale_c_parse_makefile = 1

" Key mapping
let g:which_key_map.a = {
  \ 'name' : '+ale',
  \ 'r' : [ '<Plug>(ale_find_references)', 'find references' ],
  \ 'd' : [ '<Plug>(ale_go_to_definition)', 'go to definition' ],
  \ 'n' : [ '<Plug>(ale_next_wrap)' , 'go to next ale mark' ],
  \ 'p' : [ '<Plug>(ale_previous_wrap)' , 'go to previous ale mark' ],
  \ 'j' : [ '<Plug>(ale_next_wrap)' , 'go to next ale mark' ],
  \ 'k' : [ '<Plug>(ale_previous_wrap)' , 'go to previous ale mark' ],
  \ 'h' : [ '<Plug>(ale_hover)' , 'show hover info' ],
  \ }
" }}}
" Vim Tex {{{
" enable vimtex fold
let g:vimtex_fold_enabled = 1
" start vim with a server, see ':h vimtex-clientserver'
if empty(v:servername) && exists('*remote_startserver') && !empty($DISPLAY)
  call remote_startserver('VIM')
endif
" viewer setting
let g:vimtex_view_method = 'zathura'
" matching delimiters is causing performance issues
let g:vimtex_matchparen_enabled = 0
" compiler
let g:vimtex_compiler_method = "latexmk"
let g:vimtex_compiler_latexmk = {
    \ 'build_dir' : 'output',
    \}
" }}}
" Mathematica {{{
let g:mma_candy = 2
" }}}
" vim-slime {{{
let g:slime_no_mappings = 1
xmap <leader>ss <Plug>SlimeRegionSend
nmap <leader>ss <Plug>SlimeParagraphSend
let g:which_key_map.s = {
    \ "name" : "slime",
    \ "s" : "send text with slime",
    \ "c" : [ "<Plug>SlimeConfig", "configure slime" ],
    \ }
" set config to use the pane on the right by default
let g:slime_default_config = {
    \ "socket_name": get(split($TMUX, ","), 0),
    \ "target_pane": "{right-of}"
    \ }
" vim terminal config
let g:slime_vimterminal_config = {
    \ "vertical": 1
    \ }
let g:slime_dont_ask_default = 0
" use temp file
let g:slime_paste_file = tempname()
" ipython specific setting
let g:slime_python_ipython = 0
" targets
if len($TMUX) != 0
    let g:slime_target = "tmux"
    let g:slime_dont_ask_default = 1
elseif match($TERM, "screen") != -1
    let g:slime_target = "screen"
else
    let g:slime_target = "vimterminal"
endif
" }}}
" }}}
" vim:foldmethod=marker:foldlevel=1
