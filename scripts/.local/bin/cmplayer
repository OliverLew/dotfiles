#!/bin/sh
#
# A script to play video in framebuffer using mplayer and put it on the position
# of current tmux pane if in a tmux session.
#
# Requirement:
#   framebuffer(i.e. in tty), mplayer, ffprobe, tmux(optional)
#
# TODO:
#   pass mplayer options

# Character width and height in pixels
charw=10
charh=20
# The framebuffer device name under /dev/
FB=fb0
# This temp file will be created
MPLAYER_INPUT_CONF="/tmp/mplayer_input.conf"

if [ $# = 0 ] || [ "$1" = "-h" ] || [ -n "$DISPLAY" ]; then
    cat << EOF
Usage: $(basename "$0") video [ video ... ]

Note: You need to change the character size in this script if the font size
      you are using is different from the preset (10, 20).

Note: This script is meant to be used under framebuffer (e.g. tty).
      If you are in tty inside a tmux session which was started in X11, it will
      have a \$DISPLAY environment variable. unset it with \`unset DISPLAY\` or
      $ DISPLAY= $(basename "$0") video
EOF
    exit
fi

command -v mplayer > /dev/null 2>&1 || { echo Please install mplayer; exit; }

# Use 'q' to quit mplayer with a non-zero exit code so we can quit this script
rm -f $MPLAYER_INPUT_CONF && echo "q quit 129" > $MPLAYER_INPUT_CONF

# Hide the cursor and texts
clear; tput civis
# Clean upon quit
trap 'clear; tput cnorm' INT TERM QUIT EXIT

# Calculate position and available size
if [ -n "$TMUX_PANE" ]; then
    # The following command get the pane's location and size (in unit of characters)
    # The format of #{window_visible_layout} is loosely summarised recursively as:
    #   <format> = <width>x<height>,<x>,<y>(,<id>|{<format>}|[<format>])
    # We only need the ones with ids, which means they don't have child structures.
    IFS=x, read -r w h x y _ << EOF
    $(tmux display -p -F "#{window_visible_layout}" \
    | grep -o "\([0-9]*\)x\([0-9]*\),\([0-9]*\),\([0-9]*\),${TMUX_PANE#%}")
EOF
    pane_w=$((w * charw))
    pane_h=$((h * charh))
    pane_x=$((x * charw))
    pane_y=$((y * charh))
else
    # Use framebuffer size if not in tmux
    pane_x=0
    pane_y=0
    IFS=, read -r pane_w pane_h < "/sys/class/graphics/$FB/virtual_size"
fi

# Play each of the videos separately (deal with different video sizes)
for video in "$@"; do
    # Get the real size of the video
    IFS=,: read -r width height sar_x sar_y << EOF
    $(ffprobe "$video" -v error -select_streams v:0 -of csv=s=,:p=0 \
    -show_entries stream=width,height,sample_aspect_ratio)
EOF
    [ "$width" -gt 0 ] || continue

    # fix the aspect ratio, sar might be absent in some videos
    if [ "$sar_x" != "N/A" ] && [ -n "$sar_x" ] && [ -n "$sar_y" ]; then
        width=$((width * sar_x / sar_y))
    fi

    # Calculate the actual video dimension on screen that could fit in the pane
    # Also center the video appropriately
    video_w=$pane_w
    video_h=$pane_h
    video_x=$pane_x
    video_y=$pane_y
    if [ $((width * pane_h - height * pane_w)) -gt 0 ]; then
        video_h=$((pane_w * height / width))
        [ "$pane_w" -gt "$pane_h" ] && video_y=$((pane_y + (pane_h - video_h) / 2))
    else
        video_w=$((pane_h * width / height))
        video_x=$((pane_x + (pane_w - video_w) / 2))
    fi

    # Finally what we wanted to do!
    # - Mute all output / disable user config in case of conflicts
    # - And play the video with correct position and size
    # - Use the keybinding trick to quit the whole script on 'q'
    mplayer "$video" -vo fbdev2 -msglevel all=-1 -nolirc -noconfig user \
            -vf scale="$video_w":"$video_h" -geometry $video_x:$video_y \
            -input conf=$MPLAYER_INPUT_CONF || exit
done
