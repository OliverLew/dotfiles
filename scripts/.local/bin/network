#!/bin/sh
# Script to show status, name and speed of network interfaces

usage() {
    echo "$(basename "$0") [ -h ] [ -ew -i <interface> ] [ -cns ]"
    echo
    echo "Devices:"
    echo "    -e: show stats about all ethernet devices"
    echo "    -w: show stats about all wireless devices"
    echo "    -i <interface>: show stats about <interface>"
    echo
    echo "Output:"
    echo "    -c: show basic connection infomation: name and signal strength if available"
    echo "    -n: show device names"
    echo "    -s: show device RX/TX (a.k.a. DL/UL) speed"
    echo "    default: print device status, 1 for up, 0 for down"
    echo
    echo "Format:"
    echo "    -h: format speed with human readable units (B/s, KB/s, MB/s, etc)"
    echo
    echo "Note: the options can be put together, e.g. show network speed for eth0"
    echo "    $(basename "$0") -hs -i eth0"
}

while getopts "i:webcnsh-:" arg; do
    case "$arg" in
        i) interface="$OPTARG";;
        w) flag_wireless=1;;
        e) flag_ethernet=1;;
        c) flag_connection=1;;
        n) flag_name=1;;
        s) flag_speed=1;;
        h) flag_human_readable=1;;
        -) [ "$OPTARG" = "help" ] && usage; exit;;
        *) usage; exit 1;;
    esac
done
shift "$((OPTIND - 1))"
if [ "$#" != 0 ]; then usage; exit 1; fi

folder="/sys/class/net"

if [ -n "$interface" ]; then
    devices="$folder/$interface"
elif [ "$flag_ethernet" = 1 ]; then
    devices=$(find "$folder" -name "e*")
elif [ "$flag_wireless" = 1 ]; then
    devices=$(find "$folder" -name "w*")
elif [ -n "$flag_name" ]; then
    devices=$(find "$folder" -name "[ew]*")
else
    usage
    exit
fi

human_readable()
{
    while read -r speed; do
        for unit in B/s KB/s MB/s GB/s TB/s PB/s; do
            if [ "$speed" -lt 1000 ]; then
                echo "$speed.${decimal:-0} $unit"
                break
            else
                # TODO: wrong: zeros (I forgot what this means ...)
                decimal="$((speed % 1000))"
                speed="$((speed / 1000))"
            fi
        done
    done
}

show_speed()
{
    NANO_PER_SEC=1000000000
    device=$1
    tmpfile=/tmp/status/$(basename "$device")_old
    timens=$(date +"%s%N")
    read -r rx_bytes < "$device"/statistics/rx_bytes
    read -r tx_bytes < "$device"/statistics/tx_bytes

    if [ -f "$tmpfile" ]; then
        read -r timens_old rx_bytes_old tx_bytes_old < "$tmpfile"
        timens_span=$((timens - timens_old))
        receive_total=$((rx_bytes - rx_bytes_old))
        transmit_total=$((tx_bytes - tx_bytes_old))
    fi

    if [ -z "$timens_span" ] || [ "$timens_span" -gt $((NANO_PER_SEC * 3)) ]; then
        echo "$timens $rx_bytes $tx_bytes" > "$tmpfile"
    fi
    # TODO: possible inaccuracy
    if [ -n "$timens_span" ] \
        && [ "$timens_span" -gt $((NANO_PER_SEC * 1 / 10)) ] \
        && [ "$timens_span" -lt $((NANO_PER_SEC * 10)) ]; then
        echo $((receive_total * NANO_PER_SEC / timens_span))
        echo $((transmit_total * NANO_PER_SEC / timens_span))
    else
        sleep 1
        show_speed "$device"
    fi
}

if [ -z "$devices" ]; then
    if [ "$flag_name" = 1 ]; then
        echo No device
    elif [ "$flag_speed" = 1 ]; then
        echo 0
        echo 0
    elif [ "$flag_connection" = 1 ]; then
        echo --
        echo 0
    else
        echo 0
    fi
fi

for device in $devices; do
    if [ "$flag_name" = 1 ]; then
        basename "$device"
    elif [ "$flag_speed" = 1 ]; then
        if [ "$flag_human_readable" = 1 ]; then
            show_speed "$device" | human_readable
        else
            show_speed "$device"
        fi
    elif [ -n "$flag_connection" ]; then
        nmcli -f GENERAL,AP dev show "$(basename "$device")" |
        {   while IFS=': ' read -r key value; do
                case "$key" in
                    GENERAL.CONNECTION) connection=$value;;
                    AP[*].IN-USE) ap_inuse=$value;;
                    AP[*].SSID) ssid=$value;;
                    AP[*].SIGNAL) signal=$value;;
                esac
            done;
            if [ -n "$ap_inuse" ]; then
                printf "%s\n%s" "$ssid" "$signal"
            elif [ "$connection" != "--" ]; then
                printf "%s\n100" "$connection"
            fi
        }
    else
        read -r state < "$device"/operstate
        [ "$state" = "up" ] && echo 1 || echo 0
    fi
done
