## This config is used in the fbtmux script, and is specially for session in fbterm

# Like the method in the fbtmux script, I recommand start a session with a
# special session name, e.g. fbterm, and a special socket name, e.g. fbterm
# so that only

# The configs in this file is trying to make tmux behave more like a WM by
# - using root keybindings,
# - emulating a "tiled" layout and
# - keeping every window alive by not closing its last pane(see the hack below)
# The keybindings are intended to be similar to AwesomeWM/dwm

## Source the common configs
source ~/.tmux.conf

## Layout
# Use this layout to simulate stack layout
default_layout=main-vertical
bind -n M-r select-layout $default_layout
# Hooks for reload(keep) layout
set-hook -g pane-exited "select-layout $default_layout"
set-hook -g after-split-window "select-layout $default_layout"
# Always keep the main pane width half the window width
set-hook -g client-resized 'run "tmux set -g main-pane-width \"$(expr \"#{window_width}\" / 2)\"" ; select-layout $default_layout'

## Manage panes
# Select/Navigate pane up and down
bind -n M-j select-pane -t +
bind -n M-k select-pane -t -
# Move pane up and down in the stack
bind -n M-J swap-pane -t + \; select-pane -t +
bind -n M-K swap-pane -t - \; select-pane -t -
# Resize master pane width
bind -n M-h resize-pane -L 4
bind -n M-l resize-pane -R 4
# Resize stack pane height
bind -n M-H resize-pane -U 2
bind -n M-L resize-pane -D 2
# Focus selected pane (move to master)
bind -n M-Space swap-pane -d -t 0
# Zoom(maximize) pane
bind -n M-m resize-pane -Z
# Create new pane in current directory
bind -n M-Enter split-window -t :.0 -c "#{pane_current_path}" \; swap-pane -s :.0 -t :.1

## Manage windows
# Choose tree (like activity view)
bind -n M-a choose-tree -Zw
# Change windows
bind -n M-. next-window
bind -n M-, previous-window
bind -n M-Escape last-window
# Move pane to prev/next window
bind -n M-< if "test #{window_panes} -eq 1" "split-window -d" \; move-pane -t :- \; select-layout $default_layout \; select-layout -t :! $default_layout
bind -n M-> if "test #{window_panes} -eq 1" "split-window -d" \; move-pane -t :+ \; select-layout $default_layout \; select-layout -t :! $default_layout
# Go directly to windows
bind -n M-1 select-window -t :1
bind -n M-2 select-window -t :2
bind -n M-3 select-window -t :3
bind -n M-4 select-window -t :4
bind -n M-5 select-window -t :5
bind -n M-6 select-window -t :6
bind -n M-7 select-window -t :7
bind -n M-8 select-window -t :8
bind -n M-9 select-window -t :9

## UI
# Toggle status line
bind -n M-b set-option status

## Lock screen / more like screensaver
bind -n M-C-l lock-session
# Lock(start screensaver) after 10 minutes
set -g lock-after-time 600
# Set tty-clock as screensaver, make it fullscreen, exit upon any keypress
set -g lock-command "tmux set status off; tmux resize-pane -Z; tty-clock -csSa 100000000 -d 0; tmux set status on; tmux resize-pane -Z"

## Multimedia
# Change brightness
bind -n M-- run-shell -b "light -U 5"\; refresh-client
bind -n M-= run-shell -b "light -A 5"\; refresh-client
# Change volume
bind -n M-[ run-shell -b "amixer -q set Master 4%-"\; refresh-client
bind -n M-] run-shell -b "amixer -q set Master 4%+"\; refresh-client
bind -n M-\ run-shell -b "amixer -q set Master toggle"\; refresh-client

## A hack to keep the last pane of a window alive together
# Do not close pane when exit (e.g. after exit bash)
set -g remain-on-exit on
# After exit, kill pane only when there is more than one remaining. So the last one won't close
set-hook -g pane-died 'if "test #{window_panes} -eq 1" "respawn-pane" "kill-pane \; select-layout $default_layout"'
# Kill pane if it's not the last one in the window
bind -n M-q if "test #{window_panes} -gt 1" "kill-pane \; select-layout $default_layout"

## Use fancy font characters as window names with the idea of saving space
# (with the loss of not showing the current running program)
set -g automatic-rename on
set -g automatic-rename-format "謹"
# Automatically create 6 more windows at start (the chars are fbterm friendly)
set-hook -g session-created "neww -d \; neww -d \; neww -d -n 漣 \; neww -d -n 拾 \; neww -d -n 爵 \; neww -d -n 輸"

# Launchers
bind -n M-e split-window "neomutt"
bind -n M-f split-window "ranger"
bind -n M-w split-window "elinks"
bind -n M-c split-window "irssi"

# Rebind some prefix hotkeys
bind -n M-C-r source-file ~/.tmux.conf
bind -n M-Q detach-client

# Status bar
set -g status-right-length 100
set -g status-right "\
#[fg=colour154,bg=colour0] #(wttr-tmux) \
#[fg=colour172,bg=colour0] 祥#(up) \
#[fg=colour13 ,bg=colour0] 﨧#(imap-tmux) \
#[fg=colour201,bg=colour0] 龍#(cpu)% \
#[fg=colour9  ,bg=colour0] 力#(mem -u)/#(mem -t) \
#[fg=colour51 ,bg=colour0] #{?#(vol -s),墳,婢}#(vol)% \
#[fg=colour226,bg=colour0] 盛#(printf "%.0f" `light`)% \
#[fg=colour172,bg=colour0] 﨟%a %d/%m/%y %R \
#[fg=colour46 ,bg=colour0] #{?#(net -w),直,睊}#{?#(net -e),囹,} #{?#(ac),,} #(bat)% \
"
# 

# vim: ft=tmux
