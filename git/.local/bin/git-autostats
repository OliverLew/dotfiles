#!/bin/sh

while getopts "u" p; do
    case "$p" in
        u) flag_update=1;;
        *) ;;
    esac
done

ahead=0
behind=0
conflict=0
uptodate=0

if [ -f "$HOME/.config/git-autofetch" ]; then
    if [ "$flag_update" != 1 ]; then
        printf "%s %s  %s\n" "ahead" "behind" "repo path"
    fi
    while read -r p; do
        upstream="$(git -C "$p" for-each-ref --format='%(upstream:short)' "$(git -C "$p" symbolic-ref -q HEAD)")"
        local="$(git -C "$p" branch --show-current)"
        left="$(git -C "$p" rev-list --count --left-only "$local"..."$upstream")"
        right="$(git -C "$p" rev-list --count --right-only "$local"..."$upstream")"
        if [ "$flag_update" = 1 ]; then
            if [ "$left" = 0 ] && [ "$right" = 0 ]; then
                uptodate=$((uptodate + 1))
            elif [ "$left" = 0 ] && [ "$right" != 0 ]; then
                behind=$((behind + 1))
            elif [ "$left" != 0 ] && [ "$right" = 0 ]; then
                ahead=$((ahead + 1))
            else # [ "$left" != 0 ] && [ "$right" != 0 ]
                conflict=$((conflict + 1))
            fi
        else
            if [ "$left" -gt 0 ]; then
                printf "\e[34m%5s\e[0m" "+$left"
            else
                printf "%5s" "+$left"
            fi
            printf "  "
            if [ "$right" -gt 0 ]; then
                printf "\e[31m%5s\e[0m" "-$right"
            else
                printf "%5s" "-$right"
            fi
            printf "  "
            echo "$p"
        fi
    done < "$HOME/.config/git-autofetch"

    if [ "$flag_update" = 1 ]; then
        echo "$uptodate $ahead $behind $conflict" > /tmp/git-autostats
    fi
fi
